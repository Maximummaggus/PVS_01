services:
  rabbitmq:
    image: rabbitmq:3.13.6-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: stockmarket
      RABBITMQ_DEFAULT_PASS: supersecret123
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  stock-publisher:
    build:
      context: ./stock-publisher
    environment:
      RABBITMQ_URL: amqp://stockmarket:supersecret123@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always # Restart policy

  mongo1:
    image: mongo:5.0
    container_name: mongo1
    ports:
      - "27017:27017"
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    volumes:
      - mongo1_data:/data/db
      - mongo1_config:/data/configdb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD", "sh", "-c", "echo 'rs.status()' | mongosh --port 27017 --quiet" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  mongo2:
    image: mongo:5.0
    container_name: mongo2
    ports:
      - "27018:27018"
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27018" ]
    volumes:
      - mongo2_data:/data/db
      - mongo2_config:/data/configdb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD", "sh", "-c", "echo 'rs.status()' | mongosh --port 27018 --quiet" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  mongo3:
    image: mongo:5.0
    container_name: mongo3
    ports:
      - "27019:27019"
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27019" ]
    volumes:
      - mongo3_data:/data/db
      - mongo3_config:/data/configdb
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD", "sh", "-c", "echo 'rs.status()' | mongosh --port 27019 --quiet" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  stock-consumer-aapl:
    build:
      context: ./stock-consumer
    environment:
      RABBITMQ_URL: amqp://stockmarket:supersecret123@rabbitmq:5672/
      MONGODB_URL: mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      QUEUE_NAME: AAPL
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy

  stock-consumer-msft:
    build:
      context: ./stock-consumer
    environment:
      RABBITMQ_URL: amqp://stockmarket:supersecret123@rabbitmq:5672/
      MONGODB_URL: mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      QUEUE_NAME: MSFT
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy

  stock-consumer-tsla:
    build:
      context: ./stock-consumer
    environment:
      RABBITMQ_URL: amqp://stockmarket:supersecret123@rabbitmq:5672/
      MONGODB_URL: mongodb://host.docker.internal:27017,host.docker.internal:27018,host.docker.internal:27019/?replicaSet=rs0
      QUEUE_NAME: TSLA
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy

  stock-liveview1:
    build:
      context: ./stock-liveview
    ports:
      - "3001:3000" # Verwende einen anderen Port für diese Instanz
    environment:
      MONGODB_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  stock-liveview2:
    build:
      context: ./stock-liveview
    ports:
      - "3002:3000" # Verwende einen anderen Port für diese Instanz
    environment:
      MONGODB_URL: mongodb://mongo1:27017,mongo2:27018,mongo3:27019/?replicaSet=rs0
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:latest
    ports:
      - "80:80" # Exponiere Port 80 für den Zugriff auf NGINX
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Mount die benutzerdefinierte NGINX-Konfiguration
    depends_on:
      - stock-liveview1
      - stock-liveview2
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongo1_data:
  mongo1_config:
  mongo2_data:
  mongo2_config:
  mongo3_data:
  mongo3_config:
